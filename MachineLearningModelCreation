import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import chardet#for encoding
import warnings# to avoid the warnings
warnings.filterwarnings('ignore')
pd.pandas.set_option('display.max_columns',0)
data=pd.read_csv("Data_For_Model.csv",index_col=0)
data.head()
data.columns
data.drop(columns=["Lng","Lat","ladderRatio","fiveYearsProperty","subway","floor_height",
                  "buildingType_2.0","buildingType_3.0","buildingType_4.0","district_2",
                  "district_3","district_4","district_5","district_6","district_7",
                  "district_8","district_9","district_10","district_11","district_12",
                  "district_13","floor_type_低","floor_type_底","floor_type_未知",
                  "floor_type_顶","floor_type_高"],inplace=True,axis=1)
data.shape
data.columns
#input features for model
X=data.drop(['totalPrice'],axis=1)
#output features for model
y=data['totalPrice']
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=2)
from sklearn.linear_model import LinearRegression

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
print("By using Linear Regression we got:")
print("Training data accuracy",lr_model.score(X_train, y_train))
print("Testing data accuracy",lr_model.score(X_test, y_test))

## RandomForest Model

from sklearn.ensemble import RandomForestRegressor
rfm=RandomForestRegressor()
rfm.fit(X_train,y_train)

print(rfm.score(X_train,y_train))
print(rfm.score(X_test,y_test))

pred=rfm.predict(X_test)
pred

from sklearn.metrics import mean_absolute_error
from sklearn import metrics
print(mean_absolute_error(y_test,pred))
print(metrics.mean_absolute_error(y_test,pred))

rfm.get_params()
# from sklearn.model_selection import RandomizedSearchCV
# rf_grid= {'n_estimators': np.arange(80,120,10),
#       'criterion':["mse", "mae"],
#       'max_features': ["auto", "sqrt", "log2"]
#   }
# print(rf_grid)
# rfm_randomcv=RandomizedSearchCV(estimator=rfm,param_distributions=rf_grid,cv=3,n_jobs=-1,
#                                random_state=20,verbose=1)
# rfm_randomcv.fit(X_train,y_train)
# rfm_randomcv.best_params_
rfm=RandomForestRegressor(max_depth=None,min_samples_leaf=5,min_samples_split=6,
                          n_estimators=120,verbose=2,n_jobs=-1)
rfm.fit(X_train,y_train)

print(rfm.score(X_train,y_train))
print(rfm.score(X_test,y_test))
X.columns
test_data=[[2010,120,130,3,1,2,2,2005,45000,0,0,1,0,0,0,0,0,1]]
print(rfm.predict(test_data))

import pickle
with open('Housing_Model','wb') as f:
    pickle.dump(rfm,f)
#Testing the model
with open('Housing_Model','rb') as f:
    mod=pickle.load(f)
x=mod.predict([[2010,120,130,3,1,2,2,2005,45000,0,0,1,0,0,0,0,0,1]])
x
print(float(x))
